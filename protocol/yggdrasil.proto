syntax = "proto3";

option go_package = "github.com/redhatinsights/yggdrasil/protocol";

package yggdrasil;

service Manager {
    // Register is called by a worker to indicate it is ready and capable of
    // handling the specified type of work.
    rpc Register (WorkRegistration) returns (RegisterResponse) {}

    // Finish is called by a worker when it has completed its assigned work.
    rpc Finish (Work) returns (Empty) {}
}

service Worker {
    // Start is called by the manager to assign work to a worker.
    rpc Start (Work) returns (StartResponse) {}

    // Status is called by the manager to check whether or not a worker is busy.
    rpc Status (Empty) returns (WorkerStatus) {}
}

message Empty {}

// A WorkRegisration message contains information necessary to register for work.
message WorkRegistration {
    // The type of work the worker is capable of handling.
    string type = 1;
}

// A RegisterResponse message contains the result of a registration request.
message RegisterResponse {
    // Whether the manager accepted the registration request or not.
    bool registered = 1;

    // The address on which the worker can be dialed to assign work.
    string address = 2;

    // A message from the manager with more information about the request.
    string reason = 3;
}

// A Work message contains information about a work assignment.
message Work {
    // The work assignment identifier.
    string id = 1;

    // The work assignment payload.
    repeated bytes data = 2;
}

// A StartResponse message contains the result of a work assignment request.
message StartResponse {
    // Whether the worker accepted the work assignment or not.
    bool accepted = 1;
}

// A WorkerStatus message contains the status of a worker.
message WorkerStatus {
    enum Status {
        READY = 0;
        BUSY  = 1;
    }
    Status status = 1;
}

// A WorkAssignment message contains the URL locations to retrieve a work
// payload and return the results.
message WorkAssignment {
    // The timestamp when the message was sent.
    string sent = 1;

    // The type of work that is assigned.
    string type = 2;

    // A URL that contains a Work message.
    string payload_url = 3;

    // A URL to POST the completed Work message.
    string return_url = 4;
}
